const { onDocumentCreated } = require("firebase-functions/v2/firestore");
const admin = require("firebase-admin");
const nodemailer = require("nodemailer");
admin.initializeApp();

// C·∫•u h√¨nh gmail g·ª≠i mail
const transporter = nodemailer.createTransport({
  service: "gmail",
  auth: {
    user: "hoangthiengym99@gmail.com", // Thay b·∫±ng email g·ª≠i
    pass: "qnch ycbd bqal kwiv", // M·∫≠t kh·∫©u ·ª©ng d·ª•ng Gmail
  },
});

// H√†m g·ª≠i email x√°c nh·∫≠n khi c√≥ checkin m·ªõi
exports.sendCheckinMail = onDocumentCreated(
  "checkins/{checkinId}",
  async (event) => {
    try {
      const snap = event.data;
      const data = snap.data();
      if (!data.email) {
        console.log("Kh√¥ng c√≥ email, b·ªè qua g·ª≠i th∆∞");
        return null;
      }

      // ƒê·ªãnh d·∫°ng ng√†y t·∫≠p
      let dateStr = "Kh√¥ng x√°c ƒë·ªãnh";
      try {
        if (data.date) {
          const dateValue = data.date.toDate ? data.date.toDate() : data.date;
          dateStr = dateValue.toLocaleString("vi-VN");
        }
      } catch (e) {
        console.error("L·ªói ƒë·ªãnh d·∫°ng ng√†y th√°ng:", e);
      }

      // X·ª≠ l√Ω nh√≥m c∆°
      let musclesText = "Kh√¥ng x√°c ƒë·ªãnh";
      if (data.muscles) {
        if (Array.isArray(data.muscles)) {
          musclesText =
            data.muscles.length > 0
              ? data.muscles.join(", ")
              : "Kh√¥ng c√≥ th√¥ng tin";
        } else if (typeof data.muscles === "string") {
          musclesText = data.muscles;
        }
      }

      // X·ª≠ l√Ω remainingSessions
      let remainingSessions = "Kh√¥ng x√°c ƒë·ªãnh";
      if (typeof data.remainingSessions === "number") {
        remainingSessions = data.remainingSessions.toString();
      } else if (typeof data.remainingSessions === "string") {
        remainingSessions = data.remainingSessions;
      }

      // N·ªôi dung email
      const mailOptions = {
        from: '"HTCoaching" <hoangthiengym99@gmail.com>',
        to: data.email,
        subject: "HTCoaching - X√°c nh·∫≠n l·ªãch t·∫≠p m·ªõi",
        html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: auto;">
          <h3 style="color: #2c3e50;">Xin ch√†o ${
            data.customerName || "Kh√°ch h√†ng"
          }!</h3>
          <p>B·∫°n v·ª´a ƒë∆∞·ª£c admin HTCoaching book l·ªãch t·∫≠p:</p>
          <ul style="list-style-type: none; padding: 0;">
            <li style="margin-bottom: 10px;"><b>üìÖ Ng√†y t·∫≠p:</b> ${dateStr}</li>
            <li style="margin-bottom: 10px;"><b>üí™ Nh√≥m c∆°:</b> ${musclesText}</li>
            <li style="margin-bottom: 10px;"><b>üìù Ghi ch√∫:</b> ${
              data.note || "Kh√¥ng c√≥"
            }</li>
            <li style="margin-bottom: 10px;"><b>‚úÖ Bu·ªïi c√≤n l·∫°i:</b> ${remainingSessions}</li>
          </ul>
          <p>N·∫øu c√≥ th·∫Øc m·∫Øc, vui l√≤ng li√™n h·ªá l·∫°i trung t√¢m.</p>
          <p>Ch√∫c b·∫°n t·∫≠p luy·ªán hi·ªáu qu·∫£!</p>
          <hr style="border: 0; border-top: 1px solid #eee;">
          <p style="font-size: 0.9em; color: #777;">HTCoaching - Ph√°t tri·ªÉn th·ªÉ ch·∫•t to√†n di·ªán</p>
        </div>
      `,
        charset: "UTF-8",
      };

      // G·ª≠i mail
      const info = await transporter.sendMail(mailOptions);
      console.log(`Email ƒë√£ g·ª≠i th√†nh c√¥ng t·ªõi ${data.email}`, info.messageId);
    } catch (error) {
      // Ghi log l·ªói
      console.error("L·ªñI KHI G·ª¨I EMAIL:", error);
      if (error.response) {
        console.error("M√£ l·ªói SMTP:", error.responseCode);
        console.error("Ph·∫£n h·ªìi server:", error.response);
      }
      // G·ª≠i th√¥ng b√°o l·ªói t·ªõi admin n·∫øu c·∫ßn
      await transporter.sendMail({
        from: '"HTCoaching Error" <hoangthiengym99@gmail.com>',
        to: "hoangthiengym99@gmail.com",
        subject: "L·ªñI G·ª¨I EMAIL",
        text: `L·ªói khi g·ª≠i email x√°c nh·∫≠n: ${error.message}`,
      });
    }
    return null;
  }
);
