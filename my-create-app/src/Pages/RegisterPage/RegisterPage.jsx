import { useLocation, useNavigate } from "react-router-dom";
import { useEffect, useState } from "react";
import "./RegisterPage.css";
import FooterMinimal from "../../components/Footer/FooterMinimal";
import HeaderMinimal from "../../components/Header/HeaderMinimal";
import ChatIcon from "../../components/ChatIcons/ChatIcons";
import { useUser } from "../../UserContent/UserContext";

function RegisterPage() {
  const { state } = useLocation();
  const navigate = useNavigate();
  const selectedPackage = state?.selectedPackage;
  const planMode = state?.planMode;
  const originalPrice = state?.originalPrice || 0;
  const discount = state?.discount || 0;
  const total = state?.total || 0;
  const { user } = useUser();
  const [isNoteFocused, setIsNoteFocused] = useState(false);
  const [isNoteHintHovered, setIsNoteHintHovered] = useState(false);
  const [errors, setErrors] = useState({});
  const [newSchedule, setNewSchedule] = useState({ day: "", time: "" });

  const [formData, setFormData] = useState({
    name: "",
    phone: "",
    email: user?.email || "",
    note: "",
    location: "WAYSTATION D√ÇN CH·ª¶",
    schedule: [],
  });

  const containsProhibitedContent = (text) => {
    const badWords = [
      // üîû T·ª•c tƒ©u, khi√™u d√¢m, ch·ª≠i th·ªÅ
      "ƒë·ªãt",
      "dit",
      "ƒë·ª•",
      "du",
      "ƒë·ª• m√°",
      "ƒë·ª• m·∫π",
      "ƒëm",
      "dm",
      "dmm",
      "dcm",
      "c·∫∑c",
      "cak",
      "cac",
      "c·∫°c",
      "l·ªìn",
      "lon",
      "loz",
      "l",
      "bu·ªìi",
      "buoi",
      "b√πi",
      "bui",
      "chim",
      "b∆∞·ªõm",
      "buom",
      "b√∫",
      "bu",
      "b√∫ lol",
      "b√∫ l",
      "ƒÉn c·∫∑c",
      "ƒÉn l",
      "ƒÉn bu·ªìi",
      "ƒë√©o",
      "deo",
      "ƒë·∫øch",
      "dek",
      "vl",
      "vkl",
      "cl",
      "vcl",
      "cc",
      "shit",
      "fuck",
      "fml",
      "diss",
      "bitch",
      "b√≥p v√∫",
      "n·ª©ng",
      "n·ª©ng l·ªìn",
      "n·ª©ng vl",
      "ch·ªãch",
      "chich",
      "xo·∫°c",
      "xoc",
      "rape",
      "hi·∫øp",
      "hi·∫øp d√¢m",
      "g·∫° t√¨nh",
      "g·∫° g·∫´m",
      "sex",
      "sexy",
      "69",
      "xxx",
      "jav",
      "phim sex",
      "phim jav",
      "trai g·ªçi",
      "g√°i g·ªçi",
      "g√°i m·∫°i d√¢m",
      "b√°n d√¢m",
      "ƒëi kh√°ch",

      // üé∞ Link c√° c∆∞·ª£c, nh√† c√°i, c·ªù b·∫°c
      "bong",
      "casino",
      "bet",
      "ku",
      "cmd368",
      "w88",
      "fun88",
      "fifa",
      "letou",
      "cacuoc",
      "1xbet",
      "dafabet",
      "188bet",
      "m88",
      "baccarat",
      "xoso",
      "x·ªï s·ªë",
      "danh bai",
      "game bai",
      "rakhoi",
      "choi casino",
      "vn88",
      "bong88",
      "new88",
      "nhacaionline",
      "nh√† c√°i",

      // üß® Vi·∫øt t·∫Øt l√°ch lu·∫≠t / ti·∫øng l√≥ng ph·ªï bi·∫øn
      "fck",
      "f u",
      "dmml",
      "dmvl",
      "ml",
      "ccmm",
      "ƒëkm",
      "b·ªë m√†y",
      "m·∫π m√†y",
      "con ƒëƒ©",
      "con ch√≥",
      "th·∫±ng ch√≥",
      "clgt",
      "clmm",
      "sv",
      "√≥c ch√≥",
      "s√∫c v·∫≠t",
      "n√£o ch√≥",
    ];

    const scriptRegex = /<script.*?>.*?<\/script>/gis;
    const domainRegex =
      /(https?:\/\/)?[a-z0-9.-]*(rakhoi|sv388|win88|cmd368|fun88|go88|f8bet|esball|ae888|123win|789win|hi88|okvip|new88|w88|m88|b52|uw88|n·ªïh≈©|b√†iƒë·ªïith∆∞·ªüng|c√°ƒë·ªô|c√° c∆∞·ª£c)[^\s]*/gi;

    const lowered = text.toLowerCase();

    return (
      badWords.some((word) => lowered.includes(word)) ||
      domainRegex.test(lowered) ||
      scriptRegex.test(text)
    );
  };

  useEffect(() => {
    if (!selectedPackage || !planMode) {
      navigate("/", { replace: true });
    }
  }, [selectedPackage, planMode, navigate]);

  if (!selectedPackage || !planMode) return null;

  const validateForm = () => {
    const newErrors = {};
    if (!formData.name.trim() || formData.name.length < 8) {
      newErrors.name = "H·ªç v√† t√™n ph·∫£i c√≥ √≠t nh·∫•t 8 k√Ω t·ª±";
    }
    if (!formData.phone.match(/^[0-9]{10}$/)) {
      newErrors.phone = "S·ªë ƒëi·ªán tho·∫°i ph·∫£i ƒë√∫ng 10 ch·ªØ s·ªë";
    }
    if (!formData.email.match(/^[a-zA-Z0-9._%+-]+@gmail\.com$/)) {
      newErrors.email = "Email ph·∫£i ƒë√∫ng ƒë·ªãnh d·∫°ng @gmail.com";
    }
    if (!formData.note.trim() || formData.note.length < 8) {
      newErrors.note = "Th√¥ng tin b·ªï sung ph·∫£i c√≥ √≠t nh·∫•t 8 k√Ω t·ª±";
    } else if (containsProhibitedContent(formData.note)) {
      newErrors.note = "Th√¥ng tin ch·ª©a t·ª´ ng·ªØ ho·∫∑c n·ªôi dung kh√¥ng ph√π h·ª£p!";
    }
    if (formData.schedule.length === 0) {
      newErrors.schedule = "Vui l√≤ng th√™m √≠t nh·∫•t 1 th·ªùi gian t·∫≠p luy·ªán.";
    }
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleAddSchedule = () => {
    if (!newSchedule.day || !newSchedule.time) return;
    setFormData({
      ...formData,
      schedule: [...formData.schedule, newSchedule],
    });
    setNewSchedule({ day: "", time: "" });
  };

  const handleRemoveSchedule = (index) => {
    const updated = [...formData.schedule];
    updated.splice(index, 1);
    setFormData({ ...formData, schedule: updated });
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (!validateForm()) return;

    navigate("/payment", {
      state: {
        formData: {
          ...formData,
          uid: user?.uid || null,
        },
        selectedPackage,
        planMode,
        originalPrice,
        discount,
        total,
      },
    });
  };

  const timeOptions = Array.from({ length: 17 }, (_, i) => {
    const hour = 7 + i;
    return `${hour.toString().padStart(2, "0")}:00`;
  });

  return (
    <>
      <HeaderMinimal />
      <div className="checkout-container">
        <div className="checkout-left">
          <h2>TH√îNG TIN THANH TO√ÅN</h2>
          <form className="checkout-form" onSubmit={handleSubmit}>
            <label>H·ªç v√† t√™n *</label>
            <input
              type="text"
              value={formData.name}
              onChange={(e) =>
                setFormData({ ...formData, name: e.target.value })
              }
            />
            {errors.name && <span className="error">{errors.name}</span>}

            <label>S·ªë ƒëi·ªán tho·∫°i *</label>
            <input
              type="tel"
              value={formData.phone}
              onChange={(e) => {
                const input = e.target.value;
                if (/^[0-9]*$/.test(input)) {
                  setFormData({ ...formData, phone: input });
                }
              }}
              maxLength={10}
            />
            {errors.phone && <span className="error">{errors.phone}</span>}

            <label>Email *</label>
            <input
              type="email"
              value={formData.email}
              onChange={(e) =>
                setFormData({ ...formData, email: e.target.value })
              }
            />
            {errors.email && <span className="error">{errors.email}</span>}

            <label>Ph√≤ng t·∫≠p m√¨nh ƒëang d·∫°y *</label>
            <select
              value={formData.location}
              onChange={(e) =>
                setFormData({ ...formData, location: e.target.value })
              }
            >
              <option value="">-- Ch·ªçn ph√≤ng t·∫≠p --</option>
              <option>WAYSTATION D√ÇN CH·ª¶</option>
              <option>WAYSTATION TR∆Ø∆†NG VƒÇN H·∫¢I</option>
              <option>WAYSTATION HI·ªÜP B√åNH</option>
              <option>WAYSTATION QL13</option>
              <option>Chung C∆Ø Flora Novia</option>
            </select>

            <label>Th·ªùi gian t·∫≠p luy·ªán c·ªßa b·∫°n *</label>
            <div className="schedule-input-row">
              <select
                value={newSchedule.day}
                onChange={(e) =>
                  setNewSchedule((prev) => ({ ...prev, day: e.target.value }))
                }
              >
                <option value="">-- Ch·ªçn ng√†y --</option>
                <option>Th·ª© 2</option>
                <option>Th·ª© 3</option>
                <option>Th·ª© 4</option>
                <option>Th·ª© 5</option>
                <option>Th·ª© 6</option>
                <option>Th·ª© 7</option>
                <option>Ch·ªß nh·∫≠t</option>
              </select>
              <select
                value={newSchedule.time}
                onChange={(e) =>
                  setNewSchedule((prev) => ({ ...prev, time: e.target.value }))
                }
              >
                <option value="">-- Ch·ªçn gi·ªù --</option>
                {timeOptions.map((t) => (
                  <option key={t} value={t}>
                    {t}
                  </option>
                ))}
              </select>
              <button
                type="button"
                onClick={handleAddSchedule}
                className="order-button"
                style={{ maxWidth: "180px" }}
              >
                + Th√™m th·ªùi gian
              </button>
            </div>
            {formData.schedule.map((item, i) => (
              <div key={i} className="schedule-display">
                - {item.day} l√∫c {item.time}
                <button
                  type="button"
                  onClick={() => handleRemoveSchedule(i)}
                  className="remove-btn"
                >
                  <i className="fa-solid fa-xmark"></i>
                </button>
              </div>
            ))}
            {errors.schedule && (
              <span className="error">{errors.schedule}</span>
            )}

            <label>Th√¥ng tin b·ªï sung</label>
            <textarea
              rows={4}
              placeholder="Ghi ch√∫ b·∫Øt bu·ªôc (v√≠ d·ª•: ƒë·ªãa ƒëi·ªÉm mong mu·ªën, ƒë·ªÉ l·∫°i link fb, zalo ho·∫∑c sƒët ƒë·ªÉ b√™n m√¨nh ti·ªán trao ƒë·ªïi nha...)"
              value={formData.note}
              onChange={(e) =>
                setFormData({ ...formData, note: e.target.value })
              }
              onFocus={() => setIsNoteFocused(true)}
              onBlur={() => {
                setTimeout(() => {
                  if (!isNoteHintHovered) {
                    setIsNoteFocused(false);
                  }
                }, 100);
              }}
            />
            {errors.note && <span className="error">{errors.note}</span>}
            {(isNoteFocused || isNoteHintHovered) && (
              <small
                className="hint"
                onMouseEnter={() => setIsNoteHintHovered(true)}
                onMouseLeave={() => setIsNoteHintHovered(false)}
              >
                VD: Link Facebook nh∆∞ c·ªßa m√¨nh sau:{" "}
                <span className="example">
                  https://www.facebook.com/thienvo123456
                </span>
                , ho·∫∑c copy m·∫´u Zalo:{" "}
                <span className="example">https://zalo.me/0934215227</span> v√†
                ƒë·ªïi s·ªë ƒëi·ªán tho·∫°i c·ªßa b·∫°n.
              </small>
            )}
            <button type="submit" className="order-button">
              ƒê·∫∂T H√ÄNG
            </button>
          </form>
        </div>

        <div className="checkout-right">
          <h3>ƒê∆†N H√ÄNG C·ª¶A B·∫†N</h3>
          <div className="order-summary">
            <p>
              S·∫£n ph·∫©m:{" "}
              <strong>
                {planMode} ({selectedPackage.title})
              </strong>
            </p>
            <p>T·∫°m t√≠nh: {originalPrice.toLocaleString()}ƒë</p>
            {discount > 0 && (
              <p>
                Gi·∫£m gi√° 15%:{" "}
                <span className="register-discount">
                  -{discount.toLocaleString()}ƒë
                </span>
              </p>
            )}
            <hr />
            <p>
              <strong>T·ªïng c·ªông: {total.toLocaleString()}ƒë</strong>
            </p>
            <p>Thanh to√°n chuy·ªÉn kho·∫£n</p>
          </div>
          <p className="note">
            Th√¥ng tin c·ªßa b·∫°n s·∫Ω ƒë∆∞·ª£c d√πng ƒë·ªÉ x·ª≠ l√Ω ƒë∆°n h√†ng theo ch√≠nh s√°ch b·∫£o
            m·∫≠t c·ªßa ch√∫ng t√¥i.
          </p>
        </div>
      </div>

      <ChatIcon />
      <FooterMinimal />
    </>
  );
}

export default RegisterPage;
